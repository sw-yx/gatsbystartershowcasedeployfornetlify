{"data":{"markdownRemark":{"html":"<p>Optimizing images is a challenge on any website. To utilize best practices for performance across devices, you need multiple sizes and resolutions of each image. Luckily, Gatsby has several useful <a href=\"/docs/plugins/\">plugins</a> that work together to do that for images on <a href=\"/docs/building-with-components/#page-components\">page components</a>.</p>\n<p>The recommended approach is to use <a href=\"/docs/querying-with-graphql/\">GraphQL queries</a> to get images of the optimal size or resolution, then, display them with the <a href=\"/packages/gatsby-image/\"><code class=\"language-text\">gatsby-image</code></a> component.</p>\n<h2 id=\"query-images-with-graphql\"><a href=\"#query-images-with-graphql\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Images With GraphQL</h2>\n<p>Querying images with GraphQL allows you to access the image’s data as well as perform transformations with <a href=\"https://github.com/lovell/sharp\">Sharp</a>, a high-performance image processing library.</p>\n<p>You’ll need a few plugins for this:</p>\n<ul>\n<li><a href=\"/packages/gatsby-source-filesystem/\"><code class=\"language-text\">gatsby-source-filesystem</code></a> plugin allows you to <a href=\"docs/querying-with-graphql/#images\">query files with GraphQL</a></li>\n<li><a href=\"/packages/gatsby-plugin-sharp\"><code class=\"language-text\">gatsby-plugin-sharp</code></a> powers the connections between Sharp and Gatsby Plugins</li>\n<li><a href=\"/packages/gatsby-transformer-sharp/\"><code class=\"language-text\">gatsby-transformer-sharp</code></a> allows you to create multiples images of the right sizes and resolutions with a query</li>\n</ul>\n<p>If the final image is of a fixed size, optimization relies on having multiple resolutions of the image. If it is responsive, that is it stretches to fill a container or page, optimization relies on having different sizes of the same image. See the <a href=\"/packages/gatsby-image/#two-types-of-responsive-images\">Gatsby Image documentation for more information</a>.</p>\n<p>You can also use arguments in your query to specify exact, minimum, and maximum dimensions. See the <a href=\"/packages/gatsby-image/#two-types-of-responsive-images\">Gatsby Image documentation for complete options</a>.</p>\n<p>This example is for an image gallery where images stretch when the page is resized. It uses the <code class=\"language-text\">fluid</code> method and the fluid fragment to grab the right data to use in <code class=\"language-text\">gatsby-image</code> component and arguments to set the maximum width as 400px and maximum height as 250px.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token string\">`\n  query {\n    fileName: file(relativePath: { eq: \"images/myimage.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 400, maxHeight: 250) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`</span></span></code></pre>\n      </div>\n<h2 id=\"optimizing-images-with-gatsby-image\"><a href=\"#optimizing-images-with-gatsby-image\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimizing Images With Gatsby Image</h2>\n<p><a href=\"/packages/gatsby-image/\"><code class=\"language-text\">gatsby-image</code></a> is a plugin that automatically creates React components for optimized images that:</p>\n<blockquote>\n<ul>\n<li>Loads the optimal size of image for each device size and screen resolution</li>\n<li>Holds the image position while loading so your page doesn’t jump around as images load</li>\n<li>Uses the “blur-up” effect i.e. it loads a tiny version of the image to show while the full image is loading</li>\n<li>Alternatively provides a “traced placeholder” SVG of the image</li>\n<li>Lazy loads images, which reduces bandwidth and speeds the initial load time</li>\n<li>Uses <a href=\"https://developers.google.com/speed/webp/\">WebP</a> images, if browser supports the format</li>\n</ul>\n</blockquote>\n<p>Here is an image component that uses the query from the previous example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">&lt;Img fluid={data.fileName.childImageSharp.fluid}  /&gt;</code></pre>\n      </div>\n<h2 id=\"using-fragments-to-standardize-formatting\"><a href=\"#using-fragments-to-standardize-formatting\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Fragments To Standardize Formatting</h2>\n<p>What if you have a bunch of images and you want them all to use the same formatting?</p>\n<p>A custom fragment is an easy way to standardize formatting and re-use it on multiple images:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">export const squareImage = graphql`\nfragment squareImage on File {\n      childImageSharp {\n        fluid(maxWidth: 200, maxHeight: 200) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n}\n`;</code></pre>\n      </div>\n<p>The fragment can then be referenced in the image query:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">export const query = graphql`\n  query {\n    image1:file(relativePath: { eq: &quot;images/image1.jpg&quot; }) {\n      ...squareImage\n    }\n\n    image2:file(relativePath: { eq: &quot;images/image2.jpg&quot; }) {\n      ...squareImage\n    }\n\n   image3:file(relativePath: { eq: &quot;images/image3.jpg&quot; }) {\n      ...squareImage\n    }\n  }\n`;</code></pre>\n      </div>","excerpt":"Optimizing images is a challenge on any website. To utilize best practices for performance across devices, you need multiple sizes and…","timeToRead":3,"fields":{"slug":"/docs/working-with-images/","anchor":"working-with-images"},"frontmatter":{"title":"Working With Images In Gatsby"},"parent":{"__typename":"File","relativePath":"docs/working-with-images.md"}}},"pageContext":{"slug":"/docs/working-with-images/"}}