{"data":{"file":{"childrenDocumentationJs":[{"name":"deletePage","description":{"childMarkdownRemark":{"html":"<p>Delete a page</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">deletePage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span>"}],"params":[{"name":"page","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>a page object with at least the path set</p>"}},"properties":[{"name":"path","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The path of the page</p>"}},"properties":null},{"name":"component","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The absolute path to the page component</p>"}},"properties":null}]}]},{"name":"deleteNode","description":{"childMarkdownRemark":{"html":"<p>Delete a node</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"options","type":{"name":null},"description":null,"properties":null},{"name":"plugin","type":{"name":"Plugin"},"description":null,"properties":null},{"name":"args","type":{"name":null},"description":null,"properties":null},{"name":"$0","type":{"name":"object"},"description":null,"properties":[{"name":"node","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>the node object</p>"}},"properties":null}]}]},{"name":"deleteNodes","description":{"childMarkdownRemark":{"html":"<p>Batch delete nodes</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">deleteNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`node1`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`node2`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"nodes","type":{"name":"Array"},"description":{"childMarkdownRemark":{"html":"<p>an array of node ids</p>"}},"properties":null},{"name":"plugin","type":{"name":"Plugin"},"description":null,"properties":null}]},{"name":"createNode","description":{"childMarkdownRemark":{"html":"<p>Create a new node.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Data for the node.</span>\n  field1<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`a string`</span></span><span class=\"token punctuation\">,</span>\n  field2<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  field3<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>arbitraryOtherData<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Required fields.</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`a-node-id`</span></span><span class=\"token punctuation\">,</span>\n  parent<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`the-id-of-the-parent-node`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or null if it's a source node without a parent</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  internal<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`CoolServiceMarkdownField`</span></span><span class=\"token punctuation\">,</span>\n    contentDigest<span class=\"token punctuation\">:</span> crypto\n      <span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`md5`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>fieldData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`hex`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    mediaType<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`text/markdown`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>fieldData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Cool Service: \"Title of entry\"`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"node","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>a node object</p>"}},"properties":[{"name":"id","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The node’s ID. Must be globally unique.</p>"}},"properties":null},{"name":"parent","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The ID of the parent’s node. If the node is\nderived from another node, set that node as the parent. Otherwise it can\njust be <code class=\"language-text\">null</code>.</p>"}},"properties":null},{"name":"children","type":{"name":"Array"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>An array of children node IDs. If you’re\ncreating the children nodes while creating the parent node, add the\nchildren node IDs here directly. If you’re adding a child node to a\nparent node created by a plugin, you can’t mutate this value directly\nto add your node id, instead use the action creator <code class=\"language-text\">createParentChildLink</code>.</p>"}},"properties":null},{"name":"internal","type":{"name":"Object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>node fields that aren’t generally\ninteresting to consumers of node data but are very useful for plugin writers\nand Gatsby core.</p>"}},"properties":[{"name":"mediaType","type":{"name":"string"},"description":{"childMarkdownRemark":{"html":"<p>An optional field to indicate to\ntransformer plugins that your node has raw content they can transform.\nUse either an official media type (we use mime-db as our source\n(<a href=\"https://www.npmjs.com/package/mime-db\">https://www.npmjs.com/package/mime-db</a>) or a made-up one if your data\ndoesn’t fit in any existing bucket. Transformer plugins use node media types\nfor deciding if they should transform a node into a new one. E.g.\nmarkdown transformers look for media types of\n<code class=\"language-text\">text/markdown</code>.</p>"}}},{"name":"type","type":{"name":"string"},"description":{"childMarkdownRemark":{"html":"<p>An arbitrary globally unique type\nchoosen by the plugin creating the node. Should be descriptive of the\nnode as the type is used in forming GraphQL types so users will query\nfor nodes based on the type choosen here. Nodes of a given type can\nonly be created by one plugin.</p>"}}},{"name":"content","type":{"name":"string"},"description":{"childMarkdownRemark":{"html":"<p>An optional field. The raw content\nof the node. Can be excluded if it’d require a lot of memory to load in\nwhich case you must define a <code class=\"language-text\">loadNodeContent</code> function for this node.</p>"}}},{"name":"contentDigest","type":{"name":"string"},"description":{"childMarkdownRemark":{"html":"<p>the digest for the content\nof this node. Helps Gatsby avoid doing extra work on data that hasn’t\nchanged.</p>"}}},{"name":"description","type":{"name":"string"},"description":{"childMarkdownRemark":{"html":"<p>An optional field. Human\nreadable description of what this node represent / its source. It will\nbe displayed when type conflicts are found, making it easier to find\nand correct type conflicts.</p>"}}}]}]},{"name":"plugin","type":{"name":"Plugin"},"description":null,"properties":null},{"name":"actionOptions","type":{"name":"ActionOptions"},"description":null,"properties":null}]},{"name":"touchNode","description":{"childMarkdownRemark":{"html":"<p>“Touch” a node. Tells Gatsby a node still exists and shouldn’t\nbe garbage collected. Primarily useful for source plugins fetching\nnodes from a remote system that can return only nodes that have\nupdated. The source plugin then touches all the nodes that haven’t\nupdated but still exist so Gatsby knows to keep them.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">touchNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nodeId<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`a-node-id`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"options","type":{"name":null},"description":null,"properties":null},{"name":"plugin","type":{"name":"Plugin"},"description":null,"properties":null},{"name":"$0","type":{"name":"Object"},"description":null,"properties":[{"name":"nodeId","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The id of a node</p>"}},"properties":null}]}]},{"name":"createNodeField","description":{"childMarkdownRemark":{"html":"<p>Extend another node. The new node field is placed under the <code class=\"language-text\">fields</code>\nkey on the extended node object.</p>\n<p>Once a plugin has claimed a field name the field name can’t be used by\nother plugins.  Also since nodes are immutable, you can’t mutate the node\ndirectly. So to extend another node, use this.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">createNodeField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`happiness`</span></span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`is sweet graphql queries`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The field value is now accessible at node.fields.happiness</span>"}],"params":[{"name":"$0","type":{"name":"Object"},"description":null,"properties":[{"name":"node","type":{"name":"Object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>the target node object</p>"}},"properties":null},{"name":"name","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>the name for the field</p>"}},"properties":null},{"name":"value","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>the value for the field</p>"}},"properties":null},{"name":"fieldName","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>[deprecated] the name for the field</p>"}},"properties":null},{"name":"fieldValue","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>[deprecated] the value for the field</p>"}},"properties":null}]},{"name":"plugin","type":{"name":"Plugin"},"description":null,"properties":null},{"name":"actionOptions","type":{"name":"ActionOptions"},"description":null,"properties":null}]},{"name":"createParentChildLink","description":{"childMarkdownRemark":{"html":"<p>Creates a link between a parent and child node. This is used when you\ntransform content from a node creating a new child node. You need to add\nthis new child node to the <code class=\"language-text\">children</code> array of the parent but since you\ndon’t have direct access to the immutable parent node, use this action\ninstead.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">createParentChildLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> parent<span class=\"token punctuation\">:</span> parentNode<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">:</span> childNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"$0","type":{"name":"Object"},"description":null,"properties":[{"name":"parent","type":{"name":"Object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>the parent node object</p>"}},"properties":null},{"name":"child","type":{"name":"Object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>the child node object</p>"}},"properties":null}]},{"name":"plugin","type":{"name":"Plugin"},"description":null,"properties":null}]},{"name":"setWebpackConfig","description":{"childMarkdownRemark":{"html":"<p>Merge additional configuration into the current webpack config. A few\nconfigurations options will be ignored if set, in order to try prevent accidental breakage.\nSpecifically, any change to <code class=\"language-text\">entry</code>, <code class=\"language-text\">output</code>, <code class=\"language-text\">target</code>, or <code class=\"language-text\">resolveLoaders</code> will be ignored.</p>\n<p>For full control over the webpack config, use <code class=\"language-text\">replaceWebpackConfig()</code>.</p>"}},"returns":[],"examples":[],"params":[{"name":"config","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>partial webpack config, to be merged into the current one</p>"}},"properties":null},{"name":"plugin","type":{"name":null},"description":null,"properties":null}]},{"name":"replaceWebpackConfig","description":{"childMarkdownRemark":{"html":"<p>Completely replace the webpack config for the current stage. This can be\ndangerous and break Gatsby if certain configuration options are changed.</p>\n<p>Generally only useful for cases where you need to handle config merging logic\nyourself, in which case consider using <code class=\"language-text\">webpack-merge</code>.</p>"}},"returns":[],"examples":[],"params":[{"name":"config","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>complete webpack config</p>"}},"properties":null},{"name":"plugin","type":{"name":null},"description":null,"properties":null}]},{"name":"setBabelOptions","description":{"childMarkdownRemark":{"html":"<p>Set top-level Babel options. Plugins and presets will be ignored. Use\nsetBabelPlugin and setBabelPreset for this.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">setBabelOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  sourceMaps<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`inline`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"options","type":{"name":"Object"},"description":null,"properties":null},{"name":"plugin","type":{"name":null},"description":null,"properties":null},{"name":"config","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>An options object in the shape of a normal babelrc javascript object</p>"}},"properties":null}]},{"name":"setBabelPlugin","description":{"childMarkdownRemark":{"html":"<p>Add new plugins or merge options into existing Babel plugins.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">setBabelPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span>  <span class=\"token template-string\"><span class=\"token string\">`babel-plugin-emotion`</span></span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sourceMap<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"config","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>A config object describing the Babel plugin to be added.</p>"}},"properties":[{"name":"name","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The name of the Babel plugin</p>"}},"properties":null},{"name":"options","type":{"name":"Object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Options to pass to the Babel plugin.</p>"}},"properties":null}]},{"name":"plugin","type":{"name":null},"description":null,"properties":null}]},{"name":"setBabelPreset","description":{"childMarkdownRemark":{"html":"<p>Add new presets or merge options into existing Babel presets.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">setBabelPreset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`@babel/preset-react`</span></span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    pragma<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Glamor.createElement`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"config","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>A config object describing the Babel plugin to be added.</p>"}},"properties":[{"name":"name","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The name of the Babel preset.</p>"}},"properties":null},{"name":"options","type":{"name":"Object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Options to pass to the Babel preset.</p>"}},"properties":null}]},{"name":"plugin","type":{"name":null},"description":null,"properties":null}]},{"name":"createJob","description":{"childMarkdownRemark":{"html":"<p>Create a “job”. This is a long-running process that are generally\nstarted as side-effects to GraphQL queries.\n<a href=\"/packages/gatsby-plugin-sharp/\"><code class=\"language-text\">gatsby-plugin-sharp</code></a> uses this for\nexample.</p>\n<p>Gatsby doesn’t finish its bootstrap until all jobs are ended.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">createJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`write file id: 123`</span></span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`something.jpeg`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"job","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>A job object with at least an id set</p>"}},"properties":[{"name":"id","type":{"name":"id"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The id of the job</p>"}},"properties":null}]},{"name":"plugin","type":{"name":null},"description":null,"properties":null}]},{"name":"setJob","description":{"childMarkdownRemark":{"html":"<p>Set (update) a “job”. Sometimes on really long running jobs you want\nto update the job as it continues.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">setJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`write file id: 123`</span></span><span class=\"token punctuation\">,</span> progress<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"job","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>A job object with at least an id set</p>"}},"properties":[{"name":"id","type":{"name":"id"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The id of the job</p>"}},"properties":null}]},{"name":"plugin","type":{"name":null},"description":null,"properties":null}]},{"name":"endJob","description":{"childMarkdownRemark":{"html":"<p>End a “job”.</p>\n<p>Gatsby doesn’t finish its bootstrap until all jobs are ended.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">endJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`write file id: 123`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"job","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>A job object with at least an id set</p>"}},"properties":[{"name":"id","type":{"name":"id"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The id of the job</p>"}},"properties":null}]},{"name":"plugin","type":{"name":null},"description":null,"properties":null}]},{"name":"setPluginStatus","description":{"childMarkdownRemark":{"html":"<p>Set plugin status. A plugin can use this to save status keys e.g. the last\nit fetched something. These values are persisted between runs of Gatsby.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">setPluginStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> lastFetched<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"status","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>An object with arbitrary values set</p>"}},"properties":null},{"name":"plugin","type":{"name":"Plugin"},"description":null,"properties":null}]},{"name":"createRedirect","description":{"childMarkdownRemark":{"html":"<p>Create a redirect from one page to another. Server redirects don’t work out\nof the box. You must have a plugin setup to integrate the redirect data with\nyour hosting technology e.g. the <a href=\"/packages/gatsby-plugin-netlify/\">Netlify\nplugin</a>).</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">createRedirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fromPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/old-url'</span><span class=\"token punctuation\">,</span> toPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/new-url'</span><span class=\"token punctuation\">,</span> isPermanent<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">createRedirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fromPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/url'</span><span class=\"token punctuation\">,</span> toPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/zn-CH/url'</span><span class=\"token punctuation\">,</span> Language<span class=\"token punctuation\">:</span> <span class=\"token string\">'zn'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"redirect","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>Redirect data</p>"}},"properties":[{"name":"fromPath","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Any valid URL. Must start with a forward slash</p>"}},"properties":null},{"name":"isPermanent","type":{"name":"boolean"},"default":"false","description":{"childMarkdownRemark":{"html":"<p>This is a permanent redirect; defaults to temporary</p>"}},"properties":null},{"name":"redirectInBrowser","type":{"name":"boolean"},"default":"false","description":{"childMarkdownRemark":{"html":"<p>Redirects are generally for redirecting legacy URLs to their new configuration. If you can’t update your UI for some reason, set <code class=\"language-text\">redirectInBrowser</code> to true and Gatsby will handle redirecting in the client as well.</p>"}},"properties":null},{"name":"toPath","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>URL of a created page (see <code class=\"language-text\">createPage</code>)</p>"}},"properties":null},{"name":"rest","type":{"name":null},"default":null,"description":null,"properties":null}]}]},{"name":"actions","description":{"childMarkdownRemark":{"html":"<p>All defined actions.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"boundActionCreators","description":{"childMarkdownRemark":{"html":"<p>All action creators wrapped with a dispatch.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"fileOkCache","description":{"childMarkdownRemark":{"html":"<p>Create a page. See <a href=\"/docs/creating-and-modifying-pages/\">the guide on creating and modifying pages</a>\nfor detailed documenation about creating pages.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/my-sweet-new-page/`</span></span><span class=\"token punctuation\">,</span>\n  component<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`./src/templates/my-sweet-new-page.js`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// The context is passed as props to the component as well</span>\n  <span class=\"token comment\">// as into the component's GraphQL query.</span>\n  context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`123456`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>"}],"params":[{"name":"page","type":{"name":"Object"},"description":{"childMarkdownRemark":{"html":"<p>a page object</p>"}},"properties":[{"name":"path","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Any valid URL. Must start with a forward slash</p>"}},"properties":null},{"name":"component","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The absolute path to the component for this page</p>"}},"properties":null},{"name":"context","type":{"name":"Object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Context data for this page. Passed as props\nto the component <code class=\"language-text\">this.props.pageContext</code> as well as to the graphql query\nas graphql arguments.</p>"}},"properties":null}]}]},{"name":"schemaFieldName","description":{"childMarkdownRemark":{"html":"<p>Normalized name of the field that will be used in schema</p>"}},"returns":[],"examples":[],"params":[]}]}},"pageContext":{}}