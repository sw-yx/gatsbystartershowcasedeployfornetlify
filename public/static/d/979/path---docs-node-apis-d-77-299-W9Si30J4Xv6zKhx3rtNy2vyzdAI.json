{"data":{"file":{"childrenDocumentationJs":[{"name":"resolvableExtensions","description":{"childMarkdownRemark":{"html":"<p>Lets plugins implementing support for other compile-to-js add to the list\nof “resolvable” file extensions. Gatsby supports <code class=\"language-text\">.js</code> and <code class=\"language-text\">.jsx</code> by default.</p>"}},"returns":[{"title":"returns"}],"examples":[],"params":[]},{"name":"createPages","description":{"childMarkdownRemark":{"html":"<p>Tell plugins to add pages. This extension point is called only after the initial\nsourcing and transformation of nodes plus creation of the GraphQL schema are\ncomplete so you can query your data in order to create pages.</p>\n<p>See also <a href=\"/docs/actions/#createPage\">the documentation for the action <code class=\"language-text\">createPage</code></a>.</p>"}},"returns":[{"title":"returns"}],"examples":[{"highlighted":"exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> blogPostTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`src/templates/blog-post.js`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Query for markdown nodes to use in creating pages.</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token string\">`\n      {\n        allMarkdownRemark(limit: 1000) {\n          edges {\n            node {\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Create blog post pages.</span>\n        result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>edge <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// required</span>\n              component<span class=\"token punctuation\">:</span> blogPostTemplate<span class=\"token punctuation\">,</span>\n              context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Add optional context data. Data can be used as</span>\n                <span class=\"token comment\">// arguments to the page GraphQL query.</span>\n                <span class=\"token comment\">//</span>\n                <span class=\"token comment\">// The page \"path\" is always available as a GraphQL</span>\n                <span class=\"token comment\">// argument.</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>"}],"params":[]},{"name":"createPagesStatefully","description":{"childMarkdownRemark":{"html":"<p>Like <code class=\"language-text\">createPages</code> but for plugins who want to manage creating and removing\npages themselves in response to changes in data <em>not</em> managed by Gatsby.\nPlugins implementing <code class=\"language-text\">createPages</code> will get called regularly to recompute\npage information as Gatsby’s data changes but those implementing\n<code class=\"language-text\">createPagesStatefully</code> will not.</p>\n<p>An example of a plugin that uses this extension point is the plugin\n<a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-page-creator\">gatsby-plugin-page-creator</a>\nwhich monitors the <code class=\"language-text\">src/pages</code> directory for the adding and removal of JS\npages. As its source of truth, files in the pages directory, is not known by\nGatsby, it needs to keep its own state about its world to know when to\nadd and remove pages.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"sourceNodes","description":{"childMarkdownRemark":{"html":"<p>Extension point to tell plugins to source nodes.</p>\n<p>See also the documentation for <a href=\"/docs/actions/#createNode\"><code class=\"language-text\">createNode</code></a>.</p>"}},"returns":[],"examples":[{"highlighted":"exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sourceNodes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createNode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token comment\">// Create nodes here.</span>\n<span class=\"token punctuation\">}</span>"}],"params":[]},{"name":"onCreateNode","description":{"childMarkdownRemark":{"html":"<p>Called when a new node is created. Plugins wishing to extend or\ntransform nodes created by other plugins should implement this API.</p>\n<p>See also the documentation for <a href=\"/docs/actions/#createNode\"><code class=\"language-text\">createNode</code></a>\nand <a href=\"/docs/actions/#createNodeField\"><code class=\"language-text\">createNodeField</code></a></p>"}},"returns":[],"examples":[{"highlighted":"exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createNode<span class=\"token punctuation\">,</span> createNodeField <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token comment\">// Transform the new node here and create a new node or</span>\n  <span class=\"token comment\">// create a new node field.</span>\n<span class=\"token punctuation\">}</span>"}],"params":[]},{"name":"onCreatePage","description":{"childMarkdownRemark":{"html":"<p>Called when a new page is created. This extension API is useful\nfor programmatically manipulating pages created by other plugins e.g.\nif you want paths without trailing slashes.</p>\n<p>See the guide <a href=\"/docs/creating-and-modifying-pages/\">Creating and Modifying Pages</a>\nfor more on this API.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"setFieldsOnGraphQLNodeType","description":{"childMarkdownRemark":{"html":"<p>Called during the creation of the GraphQL schema. Allows plugins\nto add new fields to the types created from data nodes. It will be called\nseparately for each type.</p>\n<p>This function should return an object in the shape of\n<a href=\"https://graphql.org/graphql-js/type/#graphqlobjecttype\">GraphQLFieldConfigMap</a>\nwhich will be appended to fields inferred by Gatsby from data nodes.</p>\n<p><em>Note:</em> Import GraphQL types from <code class=\"language-text\">gatsby/graphql</code> and don’t add the <code class=\"language-text\">graphql</code>\npackage to your project/plugin dependencies to avoid <code class=\"language-text\">Schema must\ncontain unique named types but contains multiple types named</code> errors.\n<code class=\"language-text\">gatsby/graphql</code> exports all builtin GraphQL types as well as the <code class=\"language-text\">graphQLJSON</code>\ntype.</p>\n<p>Many transformer plugins use this to add fields that take arguments.</p>\n<ul>\n<li><a href=\"/packages/gatsby-transformer-remark/\"><code class=\"language-text\">gatsby-transformer-remark</code></a>\nadds an “excerpt” field where the user when writing their query can specify\nhow many characters to prune the markdown source to.</li>\n<li><a href=\"/packages/gatsby-transformer-sharp/\"><code class=\"language-text\">gatsby-transformer-sharp</code></a> exposes\nmany image transformation options as GraphQL fields.</li>\n</ul>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphlQLString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby/graphql\"</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setFieldsOnGraphQLNodeType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token string\">`File`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      newField<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> GraphlQLString<span class=\"token punctuation\">,</span>\n        args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          myArgument<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> GraphlQLString<span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> fieldArgs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Id of this node is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>source<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.\n                  Field was called with argument: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fieldArgs<span class=\"token punctuation\">.</span>myArgument<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// by default return empty object</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>"}],"params":[{"name":"$0","type":{"name":"object"},"description":null,"properties":[{"name":"type","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Object containing <code class=\"language-text\">name</code> and <code class=\"language-text\">nodes</code></p>"}},"properties":null}]}]},{"name":"preprocessSource","description":{"childMarkdownRemark":{"html":"<p>Ask compile-to-js plugins to process source to JavaScript so the query\nrunner can extract out GraphQL queries for running.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"generateSideEffects","description":{"childMarkdownRemark":{"html":"<p>Tell plugins with expensive “side effects” from queries to start running\nthose now. This is a soon-to-be-replaced API only currently in use by\n<code class=\"language-text\">gatsby-plugin-sharp</code>.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"onCreateBabelConfig","description":{"childMarkdownRemark":{"html":"<p>Let plugins extend/mutate the site’s Babel configuration.\nThis API will change before 2.0 as it needs still to be converted to use\nRedux actions.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"onCreateWebpackConfig","description":{"childMarkdownRemark":{"html":"<p>Let plugins extend/mutate the site’s webpack configuration.</p>\n<p>See also the documentation for <a href=\"/docs/actions/#setWebpackConfig\"><code class=\"language-text\">setWebpackConfig</code></a>.</p>"}},"returns":[],"examples":[{"highlighted":"exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateWebpackConfig</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n stage<span class=\"token punctuation\">,</span> getConfig<span class=\"token punctuation\">,</span> rules<span class=\"token punctuation\">,</span> loaders<span class=\"token punctuation\">,</span> actions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  actions<span class=\"token punctuation\">.</span><span class=\"token function\">setWebpackConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-css'</span><span class=\"token punctuation\">,</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>loaders<span class=\"token punctuation\">.</span><span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loaders<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"}],"params":[{"name":"$0","type":{"name":"object"},"description":null,"properties":[{"name":"stage","type":{"name":null},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The current build stage</p>"}},"properties":null},{"name":"getConfig","type":{"name":null},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Returns the current webpack config</p>"}},"properties":null},{"name":"rules","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>A set of preconfigured webpack config rules</p>"}},"properties":null},{"name":"loaders","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>A set of preconfigured webpack config loaders</p>"}},"properties":null},{"name":"plugins","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>A set of preconfigured webpack config plugins</p>"}},"properties":null},{"name":"actions","type":{"name":"object"},"default":null,"description":null,"properties":null}]}]},{"name":"onPreInit","description":{"childMarkdownRemark":{"html":"<p>The first API called during Gatsby execution, runs as soon as plugins are loaded, before cache initialization and bootstrap preparation.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"onPreBootstrap","description":{"childMarkdownRemark":{"html":"<p>Called once Gatsby has initialized itself and is ready to bootstrap your site.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"onPostBootstrap","description":{"childMarkdownRemark":{"html":"<p>Called at the end of the bootstrap process after all other extension APIs have been called.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"onPreBuild","description":{"childMarkdownRemark":{"html":"<p>The first extension point called during the build process. Called after the bootstrap has completed but before the build steps start.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"onPostBuild","description":{"childMarkdownRemark":{"html":"<p>The last extension point called after all other parts of the build process\nare complete.</p>"}},"returns":[],"examples":[],"params":[]},{"name":"onPreExtractQueries","description":{"childMarkdownRemark":{"html":"<p>Run before GraphQL queries/fragments are extracted from JavaScript files. Useful for plugins\nto add more JavaScript files with queries/fragments e.g. from node_modules.</p>\n<p>See gatsby-transformer-remark and gatsby-source-contentful for examples.</p>"}},"returns":[],"examples":[],"params":[]}]}},"pageContext":{}}