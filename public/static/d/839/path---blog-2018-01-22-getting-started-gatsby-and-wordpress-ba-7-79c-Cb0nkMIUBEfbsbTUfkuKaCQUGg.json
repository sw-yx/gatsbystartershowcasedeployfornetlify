{"data":{"markdownRemark":{"html":"<p><em>This post was originally published on\n<a href=\"https://amberley.blog/getting-started-with-gatsbyjs-and-wordpress\">my blog</a>\non January 18, 2018.</em></p>\n<p>Earlier this week I began rebuilding my blog using GatsbyJS + WordPress. As I familiarized with Gatsby, I found myself flipping through a million tabs, and I thought it might be useful to summarize concepts and to aggregate links I found helpful.</p>\n<p>I recently decided to tackle a redo of my blog. I wanted to do something different and I’ve been hearing a lot about GatsbyJS. A static site generator for React that I can easily pull my existing WordPress data for? Sold. I’ll try it.</p>\n<p>I generated a new site using the <a href=\"https://github.com/gatsbyjs/gatsby-starter-default\">default starter</a> and read through what it gave me. Assuming you have the <a href=\"/docs/\">Gatsby CLI</a> installed, run:</p>\n<p><code class=\"language-text\">gatsby new gatsby-example-site</code></p>\n<p>That gets us a new site directory with a couple (mostly) empty “gatsby”-prefixed files and a src directory with some basic scaffolding. The configuration and lifecycle hooks for Gatsby get put in those “gatsby”-prefixed files, <code class=\"language-text\">gatsby-config.js</code>, <code class=\"language-text\">gatsby-node.js</code> and <code class=\"language-text\">gatsby-browser.js</code>.</p>\n<h2 id=\"gatsby-configjs\"><a href=\"#gatsby-configjs\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby-config.js</h2>\n<p>Essentially the Gatsby home base. The two things defined here initially (in the starter) are <code class=\"language-text\">siteMetadata</code> and <code class=\"language-text\">plugins</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  siteMetadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Gatsby Default Starter\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"gatsby-plugin-react-helmet\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>See the <a href=\"/docs/gatsby-config/\">docs page on gatsby-config.js</a> for more.</p>\n<p>For the curious:</p>\n<ul>\n<li><code class=\"language-text\">gatsby-plugin-react-helmet</code> is a plugin the starter includes. It’s a <a href=\"/packages/gatsby-plugin-react-helmet/\">document head manager for React</a>.</li>\n</ul>\n<h2 id=\"gatsby-nodejs\"><a href=\"#gatsby-nodejs\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby-node.js</h2>\n<p>We can make use of any of <a href=\"/docs/node-apis/\">Gatsby’s node APIs</a> by exporting a function with the name of that API from this file.</p>\n<p>For my purposes, the only one I have interacted with so far to get up and running is the <a href=\"/docs/node-apis/#createPages\"><code class=\"language-text\">createPages</code></a> API. This gets called after our data has been fetched and is available to use to dynamically build out our static pages. More on this later.</p>\n<h2 id=\"gatsby-browserjs\"><a href=\"#gatsby-browserjs\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby-browser.js</h2>\n<p>Same as above, we can make use of any of <a href=\"/docs/browser-apis/\">Gatsby’s browser APIs</a> by exporting them from this file.</p>\n<p>I haven’t needed to make use of any of these yet, but they provide a hook into <a href=\"/docs/gatsby-lifecycle-apis/\">client runtime operations</a> — for example, replacing the router component, as seen in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/examples/using-redux/gatsby-browser.js#L7\">this example</a>.</p>\n<h2 id=\"plugin-gatsby-source-wordpress\"><a href=\"#plugin-gatsby-source-wordpress\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin: gatsby-source-wordpress</h2>\n<p>Having familiarized with the basic structure, my next step was getting my data successfully pulling from WordPress. There’s a plugin for that. <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-wordpress\"><code class=\"language-text\">gatsby-source-wordpress</code></a> is Gatsby’s plugin for sourcing data from WordPress sites using the WordPress JSON REST API.</p>\n<p>(Fun fact: the WordPress REST API is already <a href=\"http://v2.wp-api.org/\">included starting with WordPress 4.7</a> — no longer requires installing a WordPress plugin. I didn’t actually know that, not having used the WordPress REST API for anything before).</p>\n<p>I started by reviewing the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/using-wordpress\">code for the plugin’s demo site</a>.</p>\n<h2 id=\"configure-the-plugin-to-pull-your-data\"><a href=\"#configure-the-plugin-to-pull-your-data\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure the plugin to pull your data</h2>\n<p>In <code class=\"language-text\">gatsby-config.js</code>, add your configuration options, including your WordPress site’s baseUrl, protocol, whether it’s hosted on <a href=\"http://wordpress.com/\">wordpress.com</a> or self-hosted, and whether it makes use of the Advanced Custom Fields (ACF) plugin.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`gatsby-source-wordpress`</span></span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// your wordpress source</span>\n        baseUrl<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`amberley.me`</span></span><span class=\"token punctuation\">,</span>\n        protocol<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`https`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// is it hosted on wordpress.com, or self-hosted?</span>\n        hostingWPCOM<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// does your site use the Advanced Custom Fields Plugin?</span>\n        useACF<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h2 id=\"use-the-data-to-dynamically-construct-pages\"><a href=\"#use-the-data-to-dynamically-construct-pages\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use the data to dynamically construct pages.</h2>\n<p>Once your source plugin is pulling data, you can construct your site pages by implementing the <code class=\"language-text\">createPages</code> API in <code class=\"language-text\">gatsby-node.js</code>. When this is called, your data has already been fetched and is available to query with GraphQL. Gatsby uses <a href=\"/docs/querying-with-graphql/#how-does-graphql-and-gatsby-work-together\">GraphQL at build time</a>; Your source plugin (in this case, <code class=\"language-text\">gatsby-source-wordpress</code>) fetches your data, and Gatsby uses that data to ”<a href=\"/docs/querying-with-graphql/#how-does-graphql-and-gatsby-work-together\">automatically <em>infer</em> a GraphQL schema</a>” that you can query against.</p>\n<p>The <code class=\"language-text\">createPages</code> API exposes the <code class=\"language-text\">graphql</code> function:</p>\n<blockquote>\n<p>The GraphQL function allows us to run arbitrary queries against the local WordPress GraphQL schema… like the site has a built-in database constructed from the fetched data that you can run queries against. (<a href=\"https://github.com/gatsbyjs/gatsby/blob/master/examples/using-wordpress/gatsby-node.js#L15\">Source</a>)</p>\n</blockquote>\n<p>I used the <code class=\"language-text\">gatsby-node.js</code> file from the plugin demo to get started. For my purposes the code to <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/examples/using-wordpress/gatsby-node.js#L12\">construct ‘posts’</a> does what I need it to do out of the box (at least for the moment). It queries our local WordPress GraphQL schema for post data, then <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/examples/using-wordpress/gatsby-node.js#L94\">iterates through each post node</a> to construct a static page for each, <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/examples/using-wordpress/gatsby-node.js#L97\">based on whatever template we define</a> and feed it.</p>\n<p>For example, below is the part of the demo <code class=\"language-text\">gatsby-node.js</code> file that iterates over all the WordPress post data.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> postTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`./src/templates/post.js`</span></span><span class=\"token punctuation\">)</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allWordpressPost<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">,</span> edge <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// will be the url for the page</span>\n    path<span class=\"token punctuation\">:</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// specify the component template of your choice</span>\n    component<span class=\"token punctuation\">:</span> <span class=\"token function\">slash</span><span class=\"token punctuation\">(</span>postTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// In the ^template's GraphQL query, 'id' will be available</span>\n    <span class=\"token comment\">// as a GraphQL variable to query for this posts's data.</span>\n    context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>The <a href=\"/docs/api-specification/#concepts\">docs define a Gatsby page</a> as “a site page with a pathname, a template component, and optional graphql query and layout component.” See the docs on the <a href=\"/docs/bound-action-creators/#createPage\">createPage bound action creator</a> and <a href=\"/docs/creating-and-modifying-pages/\">guide on creating and modifying pages for more detail</a>.</p>\n<h2 id=\"-take-a-step-back-to-templates\"><a href=\"#-take-a-step-back-to-templates\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>… Take a step back to “templates”</h2>\n<p>In the step above we dynamically create pages based on our data by passing the absolute path to a defined template to “component”. So what’s a template?</p>\n<p>A template is a page component we can loop over to dynamically create pages based on the content we’ve pulled in (described above). We pass the post id to “context” to make it available as a GraphQL variable in the template file. The <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/examples/using-wordpress/src/templates/post.js#L66\">GraphQL query defined for the template</a> then uses that id to query for data specific to that post.</p>\n<h2 id=\"-take-another-step-back-to-pages\"><a href=\"#-take-another-step-back-to-pages\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>… Take another step back to “pages”</h2>\n<p>So a template is a page component that we can use to programmatically create pages. Then what’s a page component?</p>\n<blockquote>\n<p>Page Component — React.js component that renders a page and can optionally specify a layout component and a graphql query. (<a href=\"/docs/api-specification/#concepts\">Source</a>).</p>\n</blockquote>\n<p>React components living in <code class=\"language-text\">src/pages</code> automatically become pages. The file name of a page maps to its site path. My site in its current state only has one good example of this — <code class=\"language-text\">src/pages/index.js</code> maps to <a href=\"https://amberley.blog/\">amberley.blog</a>. If I had an ‘about’ page, it would live at <code class=\"language-text\">src/pages/about.js</code>, and map to <a href=\"https://amberley.blog/about\">amberley.blog/about</a>. (Since that doesn’t exist, it will actually end up hitting the only other page currently defined in my site, which is <code class=\"language-text\">src/pages/404.js</code> — (<a href=\"/docs/add-404-page/\">read about 404 pages</a>).</p>\n<p>If you include the “optional GraphQL query” noted above, the result of that query is automatically passed to the component on a <code class=\"language-text\">data</code> prop (<code class=\"language-text\">this.props.data</code>). (<a href=\"/docs/querying-with-graphql/#what-does-a-graphql-query-look-like\">Read more on GraphQL queries</a>).</p>\n<h2 id=\"onward\"><a href=\"#onward\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Onward</h2>\n<p>While this isn’t a tutorial — more a guided walkthrough of me familiarizing and stepping through an initial Gatsby setup — if you’re following along with the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/using-wordpress\">demo code</a> you’re probably close to (or already!) seeing your WordPress data populate your Gatsby dev site if you run <code class=\"language-text\">gatsby develop</code>!</p>\n<h2 id=\"sidenotes\"><a href=\"#sidenotes\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sidenotes</h2>\n<ol>\n<li>You <a href=\"https://github.com/gatsbyjs/gatsby/issues/1172#issuecomment-308634739\">don’t need to know GraphQL</a> to get started with Gatsby. I didn’t. It’s been a good introduction.</li>\n<li>Gatsby makes heavy use of <a href=\"/docs/plugins/\">plugins</a> — both official and community — for a lot of things, from one that implements <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-google-analytics\">Google Analytics</a>, to one that adds <a href=\"https://github.com/alampros/gatsby-plugin-accessibilityjs\">GitHub’s accessibility error scanner</a> to all pages.</li>\n<li>Read through some of the source code. I particularly enjoyed reading through <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/bootstrap/index.js\">the bootstrap process</a>. (It’s beautifully commented).</li>\n<li>Gatsby.js is a static Progressive Web App (PWA) generator, but to be PWA friendly (at least according to the <a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse PWA audit</a>), look into two plugins: <code class=\"language-text\">gatsby-plugin-manifest</code> and <code class=\"language-text\">gatsby-plugin-offline</code>.</li>\n<li>I did end up <a href=\"/docs/deploy-gatsby/#netlify\">deploying with Netlify</a>, and I’m super happy with it. (A <a href=\"/blog/2017-12-06-gatsby-plus-contentful-plus-netlify/#solution-netlify--gatsby\">previous post</a> discussed Netlify a bit more, if you’re interested).</li>\n</ol>","excerpt":"This post was originally published on\n my blog \non January 18, 2018. Earlier this week I began rebuilding my blog using GatsbyJS + WordPress…","timeToRead":7,"fields":{"slug":"/blog/2018-01-22-getting-started-gatsby-and-wordpress/"},"frontmatter":{"title":"Getting Started with Gatsby and WordPress","excerpt":null,"date":"January 22nd 2018","rawDate":"2018-01-22","canonicalLink":null,"publishedAt":null,"tags":["getting-started","wordpress"],"image":null,"imageAuthor":null,"imageAuthorLink":null,"imageTitle":null,"showImageInArticle":null,"author":{"id":"Amberley Romo","bio":"Developer based in Austin, TX.","twitter":"@amberleyjohanna","avatar":{"childImageSharp":{"fixed":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30' version='1'%3e%3crect width='100%25' height='100%25' fill='%23f6f2f8'/%3e%3cpath d='M8 3c-2 1-3 3-3 9-1 4-2 6-4 5v3l-1 6v4h31v-7c0-6-1-7-2-7h-3l-3 2-2 2v1l-1-1-1-1c-2 0-6-4-5-6l2-2V9l-1-2-2-1 1-2 1-1H8m15 18v2c1 0 2 1 2 3 0 3 1 4 2 2l2-1 1 1c1 1 1-1 1-3 0-3 0-5-1-4-1 2-3 2-4 0h-3' fill='%23e0d6eb' fill-rule='evenodd'/%3e%3c/svg%3e","width":63,"height":63,"src":"/static/amberley-romo-3f69aece5f8d2389b47b4c83506b8201-eb2ad.jpg","srcSet":"/static/amberley-romo-3f69aece5f8d2389b47b4c83506b8201-eb2ad.jpg 1x,\n/static/amberley-romo-3f69aece5f8d2389b47b4c83506b8201-2d344.jpg 1.5x,\n/static/amberley-romo-3f69aece5f8d2389b47b4c83506b8201-6dc12.jpg 2x,\n/static/amberley-romo-3f69aece5f8d2389b47b4c83506b8201-c804e.jpg 3x"}}},"fields":{"slug":"/contributors/amberley-romo/"}}}}},"pageContext":{"slug":"/blog/2018-01-22-getting-started-gatsby-and-wordpress/","prev":{"fields":{"slug":"/blog/2018-01-18-how-boston-gov-used-gatsby-to-be-selected-as-an-amazon-hq2-candidate-city/","package":null,"starterShowcase":null},"frontmatter":{"title":"How Boston.gov used Gatsby to be selected as an Amazon HQ2 candidate city","draft":null,"canonicalLink":null,"publishedAt":null,"tags":["case-studies","component-library","iteration-speed"]}},"next":{"fields":{"slug":"/blog/2018-1-24-creative-software-destruction-new-presentation-layer/","package":null,"starterShowcase":null},"frontmatter":{"title":"Creative Software Destruction and the New Presentation Layer","draft":null,"canonicalLink":null,"publishedAt":null,"tags":["architecture","serverless","cdn"]}}}}