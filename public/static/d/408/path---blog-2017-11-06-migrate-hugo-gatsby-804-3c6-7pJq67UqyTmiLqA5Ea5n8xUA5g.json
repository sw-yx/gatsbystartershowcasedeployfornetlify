{"data":{"markdownRemark":{"html":"<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>As my\n<a href=\"https://kalinchernev.github.io/learn-gatsbyjs\">recent evaluations of Gatsby</a>\nwere positive, I decided to migrate my personal blog.</p>\n<p>Instead of quickly picking an already built theme with a lot of code I might not\nuse—which I did during the previous migration from Medium to Hugo—this time, I\ndecided to take a different route—building it from scratch.</p>\n<p>I focused on the process, looking for ways to make site building more generic\nand reusable.</p>\n<ul>\n<li>Content migration</li>\n<li>Programatic page creation in Gatsby</li>\n<li>Manage styles with\n<a href=\"http://kyleamathews.github.io/typography.js/\"><code class=\"language-text\">Typography.js</code></a></li>\n<li>Automatic pagination</li>\n<li>Tag pages</li>\n<li>Add an admin panel with <a href=\"https://www.netlifycms.org/\">NetlifyCMS</a></li>\n</ul>\n<p>This article will highlight lessons learned from the process, with the aim to\nprovide high-level guidelines about patterns which can be applied in migrations\nfrom other static site generators to Gatsby.</p>\n<h3 id=\"background-before-you-start\"><a href=\"#background-before-you-start\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background before you start</h3>\n<p><a href=\"https://gohugo.io/\">Hugo</a> is a super fast, convenient and well-supported tool\nfor working with static sites. I think today it’s still more mature and closer\nto classical CMS comparing to Gatsby workflows.</p>\n<p>As it’s an older ecosystem, when you need a ready plugin or a theme for quick\ngratification, it’s more likely to find something ready online for Hugo.</p>\n<p>Gatsby, on the other hand, is based on React, GraphQL, Webpack and its way of\nthinking is closer to how a developer would approach the problems from a\nsingle-page-application point of view.</p>\n<p>Gatsby might feel a bit more “raw”—there are starters and typography.js, but not\nso many ready made solutions in the conventional sense. Probably the closest\nmarketplace for themes compared to others is\n<a href=\"https://gatsbythemes.com/\">gatsbythemes</a> which is a young project.</p>\n<p>If you have landed at this article researching which tool is better for your\njob, take a look at\n<a href=\"https://www.slant.co/versus/1016/18503/~hugo_vs_gatsby-js\">comparisons</a> and\nkeep in mind that selecting a\n<a href=\"https://stackshare.io/stackups/gatsby-vs-hugo\">stack</a> boils down to being\neffective with it.</p>\n<p>For me, using Gatsby is\n<a href=\"https://kalinchernev.github.io/learn-gatsbyjs\">valuable learning experience</a>\nand it has also been so easy to work with, it feels “unfair”. For example, the\nplugin system of Gatsby keeps me sane and productive, even in cases where I know\nonly the briefest overview concepts of Webpack. Without Gatsby, I might have\nspent hours and days configuring what Gatsby provides out of the box.</p>\n<p>Last, but not least, the biggest benefit of using Gatsby compared to Hugo, is\nthe JavaScript tool-chain. Important tasks such as making a progressive web app,\nhot module reloading, etc are much easier in comparison to other static site\ngenerators.</p>\n<h3 id=\"content-migration\"><a href=\"#content-migration\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content migration</h3>\n<p>This task was easier than expected. The file structure is preserved between my\nprevious blog and the current version. Both Hugo and Gatsby work well when\nmarkdown files are stored at a <code class=\"language-text\">content/post</code> folder.</p>\n<p>The only work I had to do on the content migration was to reformat the\n<a href=\"https://gohugo.io/content-management/front-matter/\">frontmatter</a>. In Hugo, I\nused TOML, whereas <code class=\"language-text\">gatsby-transformer-remark</code> works only with YAML for the\nmoment. Luckily, I still had the Hugo CLI on my system so could make use of its\n<a href=\"https://gohugo.io/commands/hugo_convert_toyaml/\">build-in conversion tool</a>. The\nonly issue I had was that sometimes titles were longer than 1 line and were not\nparse-able, so I just had to cut some words out where problematic.</p>\n<p>My previous frontmatter already contained <code class=\"language-text\">title</code>, <code class=\"language-text\">date</code>, <code class=\"language-text\">tags</code>, and most\nimportantly - the <code class=\"language-text\">slug</code> fields. These were enough for my later work on the\nprogramatic creation of pages explained in the next section.</p>\n<h3 id=\"programatic-page-creation\"><a href=\"#programatic-page-creation\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programatic page creation</h3>\n<p>This is the official\n<a href=\"/docs/creating-and-modifying-pages/\">documentation</a>,\nplus there is a\n<a href=\"/tutorial/part-four/#data-in-gatsby\">tutorial</a>, which\ngives examples. In sum, I created a <code class=\"language-text\">gatsby-node.js</code> file which exports\n<code class=\"language-text\">createPages</code> method using the <code class=\"language-text\">createPage</code> action from\n<a href=\"/docs/bound-action-creators/\"><code class=\"language-text\">boundActionCreators</code></a>.</p>\n<p>This might sound way more complicated than what it is:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> boundActionCreators <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> boundActionCreators\n  <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n    {\n      allMarkdownRemark {\n        edges {\n          node {\n            frontmatter {\n              title\n              slug\n              tags\n            }\n          }\n        }\n      }\n    }\n  `</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges\n    <span class=\"token comment\">// Create content programatically here</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>As you see, getting the list of posts can be done in a single query.</p>\n<p>The result of this query can later be handled by a “creator” function, which I\nprefer to keep in a separate module. For example, creating posts works like\nfollowing:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`path`</span></span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>createPage<span class=\"token punctuation\">,</span> nodes<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`src/templates/post.js`</span></span><span class=\"token punctuation\">)</span>\n\n  nodes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n        component<span class=\"token punctuation\">:</span> template<span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          slug<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>I re-use the <code class=\"language-text\">slug</code> field of the frontmatter of my existing structure. I don’t\nhave to generate or calculate slugs based on information of other fields, i.e.\nmy scenario is easier than the tutorial on the official docs.</p>\n<p>This is an example of “unfair” easy - I don’t have to do literally anything to\nkeep my previous URLs of existing content the same in the new system.</p>\n<p>The display of the data is handled by a React component acting as a template. My\ncase is nothing different than the\n<a href=\"/docs/building-with-components/#page-template-components\">official documentation</a>.</p>\n<h3 id=\"adding-styles\"><a href=\"#adding-styles\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding styles</h3>\n<p>Now that the system displays the content, it’s time to style it. I decided to go\nfor the\n<a href=\"/tutorial/part-two/#typographyjs\"><code class=\"language-text\">typography.js</code> route</a>.\nThe approach is well documented and you can also see\n<a href=\"http://kyleamathews.github.io/typography.js/\">previews of the themes online</a>.</p>\n<p>Steps were:</p>\n<p>Add <code class=\"language-text\">gatsby-plugin-typography</code> and <code class=\"language-text\">typography-theme-moraga</code> (for example) and\n“enable” the plugin in the <code class=\"language-text\">gatsby-config.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript=\">\n      <pre class=\"language-javascript=\"><code class=\"language-javascript=\">{\n  resolve: `gatsby-plugin-typography`,\n  options: {\n    pathToConfigModule: `src/utils/typography`,\n  },\n},</code></pre>\n      </div>\n<p>In <code class=\"language-text\">src/utils/typograhy</code> add:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript=\">\n      <pre class=\"language-javascript=\"><code class=\"language-javascript=\">import Typography from &#39;typography&#39;;\nimport theme from &#39;typography-theme-moraga&#39;;\n\ntheme.overrideThemeStyles = () =&gt; {\n  return {\n    // Color contrast correction https://dequeuniversity.com/rules/axe/2.2/color-contrast\n    a: {\n      color: `#185D8B`,\n    },\n    img: {\n      position: `relative`,\n      left: `50%`,\n      transform: `translateX(-50%)`,\n    },\n  };\n};\n\ntheme.baseFontSize = `22px`;\nconst typography = new Typography(theme);\n\nmodule.exports = typography;</code></pre>\n      </div>\n<p>and start the project again to see:</p>\n<p><img src=\"jJqyQIi.png\" alt=\"Screenshot of a styled blog post\"></p>\n<p>As you can see, with minimal efforts, the styles are basically ready! :)</p>\n<p>I import any theme with <code class=\"language-text\">theme</code> variable since the plugin can change and the\nrest of the code will stay intact.</p>\n<h3 id=\"pagination-and-tags-pages\"><a href=\"#pagination-and-tags-pages\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pagination and tags pages</h3>\n<p>Having a decent grasp of how to create content in my new site, I proceeded with\ncreating pagination. I have about 30 blog posts, so I went for a split by 10 to\ngive an impression I have a lot of content :)</p>\n<p>As usual, a good starting point was searching for example implementations\navailable in\n<a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/\"><code class=\"language-text\">examples</code></a> and the\nissue queue. There, in the issue queue, is a gem\n<a href=\"https://github.com/gatsbyjs/gatsby/issues/1199\">epic about plugins wishlist</a>\nwhere I found the discussion leading to\n<a href=\"https://github.com/pixelstew/gatsby-paginate\">gatsby-paginate</a>.</p>\n<p>I wanted to have different contexts than the plugin, so I took inspiration for\nboth tags and pagination scenarios. I kept them as separate action creators and\nI just called them in the main creator function like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> createPostPages <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`./gatsby-actions/createPostPages`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> createPaginatedPostsPages <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`./gatsby-actions/createPaginatedPostsPages`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> createTagPages <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`./gatsby-actions/createTagPages`</span></span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> boundActionCreators <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> boundActionCreators\n  <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n    {\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        edges {\n          node {\n            frontmatter {\n              title\n              slug\n              tags\n            }\n          }\n        }\n      }\n    }\n  `</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges\n    <span class=\"token function\">createPostPages</span><span class=\"token punctuation\">(</span>createPage<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createPaginatedPostsPages</span><span class=\"token punctuation\">(</span>createPage<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createTagPages</span><span class=\"token punctuation\">(</span>createPage<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Easy to read, understand and mantain. The pagination module is a bit longer than\nthe one of the posts:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`path`</span></span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>createPage<span class=\"token punctuation\">,</span> nodes<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`src/templates/postList.js`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> paginateSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n  <span class=\"token comment\">// Split posts into arrays of length equal to number posts on each page/paginateSize</span>\n  <span class=\"token keyword\">const</span> groupedPages <span class=\"token operator\">=</span> nodes\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> index <span class=\"token operator\">%</span> paginateSize <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n        <span class=\"token operator\">?</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> paginateSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> item<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Create new indexed route for each array</span>\n  groupedPages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> groups<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pageIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">``</span></span> <span class=\"token punctuation\">:</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">const</span> paginationRoute <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`/blog/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token comment\">// Avoid showing `Previous` link on first page - passed to context</span>\n    <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token comment\">// Avoid showing `Next` link if this is the last page - passed to context</span>\n    <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> groups<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> paginationRoute<span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> template<span class=\"token punctuation\">,</span>\n      context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        group<span class=\"token punctuation\">,</span>\n        first<span class=\"token punctuation\">,</span>\n        last<span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Then, pull context information in the React component:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BlogPagedIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathContext <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> group<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> last <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pathContext<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">// Some elements</span>\n      <span class=\"token operator\">...</span>\n\n      <span class=\"token comment\">// The posts</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Post</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">node</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token comment\">// The pager</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>first <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link</span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`/blog/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Newer posts<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>last <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link</span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`/blog/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Older posts<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BlogPagedIndex<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This is a cut-down version of the component only for the blog post, do not copy\nwith too much trust…</p>\n<p>I have to be honest—I haven’t built pagination before with React/Redux, but I\nfeel this pagination approach is easier. Also, I want the pagination pages to be\naccessible at all times, not only on state change, so the content creation\napproach of building the list works well for me.</p>\n<p>I will say again that I see this is “unfair” easy. It’s probably the quickest\nimplementation of pagination I’ve made in my life.</p>\n<p>For the list of tags and inner tags pages, the approach was similar but passing\ndifferent context to the template component:</p>\n<p>For the overview page of tags:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/tags`</span></span><span class=\"token punctuation\">,</span>\n  component<span class=\"token punctuation\">:</span> template<span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>For the inner tag page:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/tags/`</span></span> <span class=\"token operator\">+</span> <span class=\"token function\">slugify</span><span class=\"token punctuation\">(</span>tagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  component<span class=\"token punctuation\">:</span> template<span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token punctuation\">,</span>\n    post<span class=\"token punctuation\">,</span>\n    tag<span class=\"token punctuation\">:</span> tagName<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h3 id=\"admin-panel\"><a href=\"#admin-panel\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Admin panel</h3>\n<p>Initially, I tried to use the <code class=\"language-text\">git-gateway</code> identity management approach in\nNetlify, but it didn’t work for me. I could not reach the point to validate or\nreset the password for my user 1, so I kept the “old-school” way of github\nintegration which works just fine for me at the moment, having the fact I will\nbe 1 user to work on the site.</p>\n<p>Not to mention also that I add this admin panel mostly for demoing the concept\nof JAM stack with admin panel to friends, colleagues and potential clients.</p>\n<p>Long story short, this is the <code class=\"language-text\">config.yml</code> configuration file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\">\n      <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> github\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> kalinchernev/kalinchernev.github.io <span class=\"token comment\"># Path to your GitHub repository</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gatsby <span class=\"token comment\"># Branch to update (master by default)</span>\n\n<span class=\"token key atrule\">publish_mode</span><span class=\"token punctuation\">:</span> editorial_workflow\n<span class=\"token key atrule\">media_folder</span><span class=\"token punctuation\">:</span> \"static/images\" <span class=\"token comment\"># Folder where user uploaded files should go</span>\n\n<span class=\"token key atrule\">collections</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># A list of collections the CMS should be able to edit</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> \"post\" <span class=\"token comment\"># Used in routes, ie.: /admin/collections/:slug/edit</span>\n    <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> \"Post\" <span class=\"token comment\"># Used in the UI, ie.: \"New Post\"</span>\n    <span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> \"content/post\" <span class=\"token comment\"># The path to the folder where the documents are stored</span>\n    <span class=\"token key atrule\">sort</span><span class=\"token punctuation\">:</span> \"date<span class=\"token punctuation\">:</span>desc\" <span class=\"token comment\"># Default is title:asc</span>\n    <span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># Allow users to create new documents in this collection</span>\n    <span class=\"token key atrule\">slug</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"{{slug}}\"</span>\n    <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># The fields each document in this collection have</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> Title<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">widget</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">tagname</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">widget</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"datetime\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> Slug<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">widget</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> Tags<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tags<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">widget</span><span class=\"token punctuation\">:</span> list<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'APIs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Body\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">widget</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"markdown\"</span><span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The only interesting part is the <code class=\"language-text\">gatsby</code> branch which I used in parallel to the\n<code class=\"language-text\">blog</code> branch. The <code class=\"language-text\">gatsby</code> branch is my development/staging and <code class=\"language-text\">blog</code> is my\nproduction.</p>\n<p>The branch in this configuration has to match to deployment branch of Netlify\nservice:</p>\n<p><img src=\"Efubv8f.png\"></p>\n<p>This is my admin page React component which is placed in <code class=\"language-text\">src/pages/admin</code> so\nthat Gatsby delivers the HTML page at <code class=\"language-text\">/admin</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> Helmet <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-helmet\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AdminPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Helmet</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charSet</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Content Manager<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n        <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/netlify-cms@^0.5.0/dist/cms.css<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">charSet</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">async</span>\n        <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/netlify-cms@^0.5.0/dist/cms.js<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Helmet</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AdminPage</code></pre>\n      </div>\n<p>In order for NetlifyCMS script to find the configuration file correctly,\n<code class=\"language-text\">config.yml</code> should be placed in <code class=\"language-text\">static/admin/config.yml</code>.</p>\n<p>Any other location or file name will result in an error.</p>\n<p>So, here’s how my admin panel looks:</p>\n<p><img src=\"lHMSbxx.png\" alt=\"Admin panel for Gatsby site\"></p>\n<p>Creating a new draft post yields a pull request:</p>\n<p><img src=\"RcynQe3.png\" alt=\"Draft post from NetlifyCMS\"></p>\n<p>Interesting part is that NetlifyCMS creates the pull request on my behalf with a\ngiven state of the branch. I could continue working on the content of the post\nwhen I’m offline (in an airplane) and push to the branch later when I’m back\nonline to trigger a new\n<a href=\"https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/\">preview from Netlify</a>.\nOnly when I decide to, I merge latest changes for styles and PWA tweaks back to\nthe post preview branch to see whole picture and approve the post, merging it to\nthe main branch.</p>\n<p>This content workflow fits very well in the model we have as developers and\nprovides granular previews of changes when and how we decide to manage.</p>\n<h3 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h3>\n<p>In this blog post I shared how a migration to Gatsby from a static generator\nlike Hugo can work. The reasons for doing a migration like this are part\ndevelopment benefits (it’s a lot easier) and also a better production site which\nfeels as smooth as a single page application.</p>\n<p>We also went through the few technical details necessary to realize the\nmigration, using GraphQL query, creators and templates.</p>\n<p>Lastly, we added an admin panel to make content management easier for our\neditors and clients.</p>\n<p>Enjoy!</p>","excerpt":"Introduction As my\n recent evaluations of Gatsby \nwere positive, I decided to migrate my personal blog. Instead of quickly picking an…","timeToRead":11,"fields":{"slug":"/blog/2017-11-06-migrate-hugo-gatsby/"},"frontmatter":{"title":"Migrate from Hugo to Gatsby","excerpt":null,"date":"November 6th 2017","rawDate":"2017-11-06T00:00:00.000Z","canonicalLink":null,"publishedAt":null,"tags":["hugo","markdown","getting-started","netlify-cms"],"image":null,"imageAuthor":null,"imageAuthorLink":null,"imageTitle":null,"showImageInArticle":null,"author":{"id":"Kalin Chernev","bio":"Full Stack Web Developer","twitter":"@kalinchernev","avatar":{"childImageSharp":{"fixed":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30' version='1'%3e%3crect width='100%25' height='100%25' fill='%23f6f2f8'/%3e%3cpath d='M11 11l-1 1H9c0 2 4 2 7 1 2-1 2-1-1-1h-2v-1h-2m-9 9l1 1 1 2-2 1c-2 0-2 1-2 3v3h31v-4c0-3-1-4-4-4l-4 1h-1l-3 1c-1 2-6 3-5 1 1-1 0-1 0 0l-2-1c0-2-2-3-8-4H2' fill='%23e0d6eb' fill-rule='evenodd'/%3e%3c/svg%3e","width":63,"height":63,"src":"/static/kalin-chernev-f81334c7356f3b9157ad6a8a38856e65-eb2ad.jpg","srcSet":"/static/kalin-chernev-f81334c7356f3b9157ad6a8a38856e65-eb2ad.jpg 1x,\n/static/kalin-chernev-f81334c7356f3b9157ad6a8a38856e65-2d344.jpg 1.5x,\n/static/kalin-chernev-f81334c7356f3b9157ad6a8a38856e65-6dc12.jpg 2x,\n/static/kalin-chernev-f81334c7356f3b9157ad6a8a38856e65-c804e.jpg 3x"}}},"fields":{"slug":"/contributors/kalin-chernev/"}}}}},"pageContext":{"slug":"/blog/2017-11-06-migrate-hugo-gatsby/","prev":{"fields":{"slug":"/blog/2017-10-29-my-search-for-the-perfect-universal-javaScript-framework/","package":null,"starterShowcase":null},"frontmatter":{"title":"My search for the perfect universal JavaScript framework","draft":null,"canonicalLink":null,"publishedAt":null,"tags":["react","ssr","static"]}},"next":{"fields":{"slug":"/blog/2017-11-08-migrate-from-jekyll-to-gatsby/","package":null,"starterShowcase":null},"frontmatter":{"title":"Migrate from Jekyll to Gatsby","draft":null,"canonicalLink":null,"publishedAt":null,"tags":["jekyll","markdown","getting-started","ci"]}}}}